import math

def pof(i):
   assert 0 <= i <= 9990, repr(i)
   # i = [0 - 10000]
   ontime = 9990 - i
   # phi = 0 - pi
   phi = (ontime * math.pi) / 10000.0
   return math.log(1 - math.cos(phi))

def invPof(l):
   a = math.exp(l)
   b = a - 1
   #print b
   phi = math.acos(b)
   i = (phi* 10000) / math.pi
   return i

def linear(i):
   if i > 236:
      i = 236
   return (255*39)  - 39 * i

def desiredPof(i):
   # 1 -> -8
   # 255 -> math.log(2)
   assert 1 <= i <= 255
   j = i - 1
   # 0 -> -8
   # 254 -> math.log(2)
   base = pof(9460)
   return base + (pof(390) - base) * (j / 254.0)


def table(i):
   # 0 -> 9980
   # 255 -> 0
   if i == 0:
      return 9980
   else:
      return int(invPof(desiredPof(i)))

if False:
   # Generate plot files
   f = open('linearPlot.txt','w')
   for i in range(1, 256):
      f.write("%u, %f\n"%( i, pof(linear(i))))
   f.close()

   f = open('tablePlot.txt','w')
   for i in range(1, 256):
      f.write("%u, %f\n"%( i, pof(table(i))))
   f.close()


f = open('table.c','w')
import sys
f.write('/* Generated by %s */\n#include "table.h"\n'%sys.argv[0])
f.write("uint16_t lookup[256] = (uint16_t[]) {")
for i in range(32):
   f.write("\n  ")
   for j in range(8):
      f.write(" %6u"%table(i*8 + j))
      if j != 7 or i != 31:
         f.write(',')
f.write('\n};\n')
f.close()

